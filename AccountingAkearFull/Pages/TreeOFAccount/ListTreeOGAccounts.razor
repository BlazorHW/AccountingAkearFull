@page "/listTreeOfAccounts"
@inject TreeOfAccountsServecs _treeOfAccountsServecs




<h3>ListTreeOGAccounts</h3>

<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="()=>Upsert(0)" />
<MudTable Items="@treeOfAccounts" Loading="loading" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<TreeOfAccounts,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">تركيبة رقم حساب </MudText>
        <MudSpacer />
        <MudTextField @bind-Value="Search" Placeholder="بحث" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ت</MudTh>
        <MudTh>رقم الحساب</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ت">@(treeOfAccounts.ToList().IndexOf(context) + 1)</MudTd>
            <MudTd DataLabel="رقم حساب">@context.NumberAcc</MudTd>
            <MudTd>
                <MudIconButton Size="Size.Small" Color="Color.Info" Icon="@Icons.Material.Filled.Edit" OnClick="()=>Upsert(context.Id)" />
                <MudIconButton Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="()=>Delete(context.Id)" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudMessageBox @ref="mbox" Title="تنبيه" CancelText="إلغاء">
        <MessageContent>
            هل تريد الحذف  ؟
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">حذف!</MudButton>
        </YesButton>
    </MudMessageBox>
    @code {
    MudMessageBox mbox { get; set; }
    IEnumerable<TreeOfAccounts> treeOfAccounts = new List<TreeOfAccounts>();
    TreeOfAccounts selectedItem = null;
    bool loading = true;
    string Search = "";
    protected override async Task OnInitializedAsync()
    {
        await LoadingData();
    }

    async Task Delete(int Id)
    {
        bool? result = await mbox.Show();
        if (result == true)
        {
            var response = await _treeOfAccountsServecs.DeleteTreeOfAccounts(Id);
            if (response.State)
            {
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
                _snackbar.Add(response.Message, Severity.Success);
                await LoadingData();
            }
        }

    }
    async Task LoadingData()
    {
        loading = true;
        treeOfAccounts = new List<TreeOfAccounts>();
        StateHasChanged();
        treeOfAccounts = await _treeOfAccountsServecs.GetAllTreeOfAccounts();
        loading = false;
        StateHasChanged();
    }
    private bool FilterFunc1(TreeOfAccounts element) => FilterFunc(element, Search);

    private bool FilterFunc(TreeOfAccounts element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.NumberAcc.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
     
        return false;
    }
    void Upsert(int id)
    {
        _navigation.NavigateTo($"/upsertTreeOfAccounts/{id}");
    }
}

